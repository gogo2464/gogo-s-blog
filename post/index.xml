<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Gogo's Blog</title><link>https://gogo2464.github.io/docs/post/</link><description>Recent content in Posts on Gogo's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 17 Jun 2024 11:58:52 +0000</lastBuildDate><atom:link href="https://gogo2464.github.io/docs/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Title_of_the_post</title><link>https://gogo2464.github.io/docs/post/title_of_the_post/</link><pubDate>Mon, 17 Jun 2024 04:28:25 +0200</pubDate><guid>https://gogo2464.github.io/docs/post/title_of_the_post/</guid><description>The summary content</description></item><item><title>Episode 1 reverse engineering and exploitation of pokemon red and blue</title><link>https://gogo2464.github.io/docs/post/episode-1-reverse-engineering-and-exploitation-of-pokemon-red-and-blue/</link><pubDate>Fri, 05 Aug 2022 21:09:23 +0200</pubDate><guid>https://gogo2464.github.io/docs/post/episode-1-reverse-engineering-and-exploitation-of-pokemon-red-and-blue/</guid><description>Hello and welcome to my first post. As a first exercise, today we are going to dissect a stack buffer overflow worm present that exploits a vulnerabilty present on the video game pokemon red and blue on gameboy. We will use reverse engineering technics.
I choose to use gameboy because this architecture has no mitigation. It is a perfect example. Also the roms of gameboy are unpatchable. It is the definition of ROM: Read Only Memory.</description></item><item><title>Welcome</title><link>https://gogo2464.github.io/docs/post/episode-0-welcome/</link><pubDate>Thu, 04 Aug 2022 12:37:42 +0200</pubDate><guid>https://gogo2464.github.io/docs/post/episode-0-welcome/</guid><description>Intro - Skills Required</description></item></channel></rss>